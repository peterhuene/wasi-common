use crate::host;
use std::io;

/// Translate a WASI errno code into an `io::Result<()>`.
pub(crate) fn wasi_errno_to_io_error(errno: host::__wasi_errno_t) -> io::Result<()> {
    #[cfg(unix)]
    let raw_os_error = match errno {
        host::__WASI_ESUCCESS => return Ok(()),
        host::__WASI_EIO => libc::EIO,
        host::__WASI_EPERM => libc::EPERM,
        host::__WASI_EINVAL => libc::EINVAL,
        host::__WASI_EPIPE => libc::EPIPE,
        host::__WASI_ENOTCONN => libc::ENOTCONN,
        host::__WASI_E2BIG => libc::E2BIG,
        host::__WASI_EACCES => libc::EACCES,
        host::__WASI_EADDRINUSE => libc::EADDRINUSE,
        host::__WASI_EADDRNOTAVAIL => libc::EADDRNOTAVAIL,
        host::__WASI_EAFNOSUPPORT => libc::EAFNOSUPPORT,
        host::__WASI_EAGAIN => libc::EAGAIN,
        host::__WASI_EALREADY => libc::EALREADY,
        host::__WASI_EBADF => libc::EBADF,
        host::__WASI_EBADMSG => libc::EBADMSG,
        host::__WASI_EBUSY => libc::EBUSY,
        host::__WASI_ECANCELED => libc::ECANCELED,
        host::__WASI_ECHILD => libc::ECHILD,
        host::__WASI_ECONNABORTED => libc::ECONNABORTED,
        host::__WASI_ECONNREFUSED => libc::ECONNREFUSED,
        host::__WASI_ECONNRESET => libc::ECONNRESET,
        host::__WASI_EDEADLK => libc::EDEADLK,
        host::__WASI_EDESTADDRREQ => libc::EDESTADDRREQ,
        host::__WASI_EDOM => libc::EDOM,
        host::__WASI_EDQUOT => libc::EDQUOT,
        host::__WASI_EEXIST => libc::EEXIST,
        host::__WASI_EFAULT => libc::EFAULT,
        host::__WASI_EFBIG => libc::EFBIG,
        host::__WASI_EHOSTUNREACH => libc::EHOSTUNREACH,
        host::__WASI_EIDRM => libc::EIDRM,
        host::__WASI_EILSEQ => libc::EILSEQ,
        host::__WASI_EINPROGRESS => libc::EINPROGRESS,
        host::__WASI_EINTR => libc::EINTR,
        host::__WASI_EISCONN => libc::EISCONN,
        host::__WASI_EISDIR => libc::EISDIR,
        host::__WASI_ELOOP => libc::ELOOP,
        host::__WASI_EMFILE => libc::EMFILE,
        host::__WASI_EMLINK => libc::EMLINK,
        host::__WASI_EMSGSIZE => libc::EMSGSIZE,
        host::__WASI_EMULTIHOP => libc::EMULTIHOP,
        host::__WASI_ENAMETOOLONG => libc::ENAMETOOLONG,
        host::__WASI_ENETDOWN => libc::ENETDOWN,
        host::__WASI_ENETRESET => libc::ENETRESET,
        host::__WASI_ENETUNREACH => libc::ENETUNREACH,
        host::__WASI_ENFILE => libc::ENFILE,
        host::__WASI_ENOBUFS => libc::ENOBUFS,
        host::__WASI_ENODEV => libc::ENODEV,
        host::__WASI_ENOENT => libc::ENOENT,
        host::__WASI_ENOEXEC => libc::ENOEXEC,
        host::__WASI_ENOLCK => libc::ENOLCK,
        host::__WASI_ENOLINK => libc::ENOLINK,
        host::__WASI_ENOMEM => libc::ENOMEM,
        host::__WASI_ENOMSG => libc::ENOMSG,
        host::__WASI_ENOPROTOOPT => libc::ENOPROTOOPT,
        host::__WASI_ENOSPC => libc::ENOSPC,
        host::__WASI_ENOSYS => libc::ENOSYS,
        host::__WASI_ENOTDIR => libc::ENOTDIR,
        host::__WASI_ENOTEMPTY => libc::ENOTEMPTY,
        host::__WASI_ENOTRECOVERABLE => libc::ENOTRECOVERABLE,
        host::__WASI_ENOTSOCK => libc::ENOTSOCK,
        host::__WASI_ENOTSUP => libc::ENOTSUP,
        host::__WASI_ENOTTY => libc::ENOTTY,
        host::__WASI_ENXIO => libc::ENXIO,
        host::__WASI_EOVERFLOW => libc::EOVERFLOW,
        host::__WASI_EOWNERDEAD => libc::EOWNERDEAD,
        host::__WASI_EPROTO => libc::EPROTO,
        host::__WASI_EPROTONOSUPPORT => libc::EPROTONOSUPPORT,
        host::__WASI_EPROTOTYPE => libc::EPROTOTYPE,
        host::__WASI_ERANGE => libc::ERANGE,
        host::__WASI_EROFS => libc::EROFS,
        host::__WASI_ESPIPE => libc::ESPIPE,
        host::__WASI_ESRCH => libc::ESRCH,
        host::__WASI_ESTALE => libc::ESTALE,
        host::__WASI_ETIMEDOUT => libc::ETIMEDOUT,
        host::__WASI_ETXTBSY => libc::ETXTBSY,
        host::__WASI_EXDEV => libc::EXDEV,
        #[cfg(target_os = "wasi")]
        host::__WASI_ENOTCAPABLE => libc::ENOTCAPABLE,
        #[cfg(not(target_os = "wasi"))]
        host::__WASI_ENOTCAPABLE => libc::EIO,
        _ => panic!("unexpected wasi errno value"),
    };

    #[cfg(windows)]
    use winapi::shared::winerror::*;

    #[cfg(windows)]
    let raw_os_error = match errno {
        host::__WASI_ESUCCESS => return Ok(()),
        host::__WASI_EIO => WSAEIO,
        host::__WASI_EINVAL => WSAEINVAL,
        host::__WASI_EPIPE => ERROR_BROKEN_PIPE,
        host::__WASI_ENOTCONN => WSAENOTCONN,
        host::__WASI_EPERM | host::__WASI_EACCES => ERROR_ACCESS_DENIED,
        host::__WASI_EADDRINUSE => WSAEADDRINUSE,
        host::__WASI_EADDRNOTAVAIL => WSAEADDRNOTAVAIL,
        host::__WASI_EAGAIN => WSAEWOULDBLOCK,
        host::__WASI_ECONNABORTED => WSAECONNABORTED,
        host::__WASI_ECONNREFUSED => WSAECONNREFUSED,
        host::__WASI_ECONNRESET => WSAECONNRESET,
        host::__WASI_EEXIST => ERROR_ALREADY_EXISTS,
        host::__WASI_ENOENT => ERROR_FILE_NOT_FOUND,
        host::__WASI_ETIMEDOUT => WSAETIMEDOUT,
        host::__WASI_E2BIG => WSAE2BIG,
        host::__WASI_EAFNOSUPPORT => WSAEAFNOSUPPORT,
        host::__WASI_EALREADY => WSAEALREADY,
        host::__WASI_EBADF => WSAEBADF,
        host::__WASI_EBADMSG => WSAEBADMSG,
        host::__WASI_EBUSY => WSAEBUSY,
        host::__WASI_ECANCELED => WSAECANCELED,
        host::__WASI_ECHILD => WSAECHILD,
        host::__WASI_EDEADLK => WSAEDEADLK,
        host::__WASI_EDESTADDRREQ => WSAEDESTADDRREQ,
        host::__WASI_EDOM => WSAEDOM,
        host::__WASI_EDQUOT => WSAEDQUOT,
        host::__WASI_EFAULT => WSAEFAULT,
        host::__WASI_EFBIG => WSAEFBIG,
        host::__WASI_EHOSTUNREACH => WSAEHOSTUNREACH,
        host::__WASI_EIDRM => WSAEIDRM,
        host::__WASI_EILSEQ => WSAEILSEQ,
        host::__WASI_EINPROGRESS => WSAEINPROGRESS,
        host::__WASI_EINTR => WSAEINTR,
        host::__WASI_EISCONN => WSAEISCONN,
        host::__WASI_EISDIR => WSAEISDIR,
        host::__WASI_ELOOP => WSAELOOP,
        host::__WASI_EMFILE => WSAEMFILE,
        host::__WASI_EMLINK => WSAEMLINK,
        host::__WASI_EMSGSIZE => WSAEMSGSIZE,
        host::__WASI_EMULTIHOP => WSAEMULTIHOP,
        host::__WASI_ENAMETOOLONG => WSAENAMETOOLONG,
        host::__WASI_ENETDOWN => WSAENETDOWN,
        host::__WASI_ENETRESET => WSAENETRESET,
        host::__WASI_ENETUNREACH => WSAENETUNREACH,
        host::__WASI_ENFILE => WSAENFILE,
        host::__WASI_ENOBUFS => WSAENOBUFS,
        host::__WASI_ENODEV => WSAENODEV,
        host::__WASI_ENOEXEC => WSAENOEXEC,
        host::__WASI_ENOLCK => WSAENOLCK,
        host::__WASI_ENOLINK => WSAENOLINK,
        host::__WASI_ENOMEM => WSAENOMEM,
        host::__WASI_ENOMSG => WSAENOMSG,
        host::__WASI_ENOPROTOOPT => WSAENOPROTOOPT,
        host::__WASI_ENOSPC => WSAENOSPC,
        host::__WASI_ENOSYS => WSAENOSYS,
        host::__WASI_ENOTDIR => WSAENOTDIR,
        host::__WASI_ENOTEMPTY => WSAENOTEMPTY,
        host::__WASI_ENOTRECOVERABLE => WSAENOTRECOVERABLE,
        host::__WASI_ENOTSOCK => WSAENOTSOCK,
        host::__WASI_ENOTSUP => WSAENOTSUP,
        host::__WASI_ENOTTY => WSAENOTTY,
        host::__WASI_ENXIO => WSAENXIO,
        host::__WASI_EOVERFLOW => WSAEOVERFLOW,
        host::__WASI_EOWNERDEAD => WSAEOWNERDEAD,
        host::__WASI_EPROTO => WSAEPROTO,
        host::__WASI_EPROTONOSUPPORT => WSAEPROTONOSUPPORT,
        host::__WASI_EPROTOTYPE => WSAEPROTOTYPE,
        host::__WASI_ERANGE => WSAERANGE,
        host::__WASI_EROFS => WSAEROFS,
        host::__WASI_ESPIPE => WSAESPIPE,
        host::__WASI_ESRCH => WSAESRCH,
        host::__WASI_ESTALE => WSAESTALE,
        host::__WASI_ETXTBSY => WSAETXTBSY,
        host::__WASI_EXDEV => WSAEXDEV,
        #[cfg(target_os = "wasi")]
        host::__WASI_ENOTCAPABLE => WSAENOTCAPABLE,
        #[cfg(not(target_os = "wasi"))]
        host::__WASI_ENOTCAPABLE => WSAEIO,
    };

    Err(io::Error::from_raw_os_error(raw_os_error))
}
